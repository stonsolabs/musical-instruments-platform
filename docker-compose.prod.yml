version: '3.8'

services:
  # Backend API (Production optimized)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: getyourmusicgear_api
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/musical_instruments
      - REDIS_URL=redis://redis:6379
      - DEBUG=false
      - DOMAIN=getyourmusicgear.com
      - FRONTEND_URL=https://getyourmusicgear.com
      - BACKEND_URL=https://api.getyourmusicgear.com
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AMAZON_ASSOCIATE_TAG=${AMAZON_ASSOCIATE_TAG}
      - THOMANN_AFFILIATE_ID=${THOMANN_AFFILIATE_ID}
      - PORT=10000
    ports:
      - "10000:10000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js (SEO-optimized with SSR)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: getyourmusicgear_frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:10000
      - BUILD_STANDALONE=true
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: getyourmusicgear_db
    environment:
      POSTGRES_DB: musical_instruments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: getyourmusicgear_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data: