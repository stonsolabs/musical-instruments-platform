# Enhanced GitHub Actions workflow for Azure Functions deployment
name: Deploy Backend to Azure Functions

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  FUNCTION_APP_NAME: 'getyourmusicgear-backend'
  RESOURCE_GROUP: 'your-resource-group'

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short

  build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      artifact-name: ${{ steps.set-output.outputs.artifact-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"

      - name: Create deployment configuration
        run: |
          cd backend
          cat > local.settings.json << 'EOF'
{
  "IsEncrypted": false,
  "Values": {
    "AzureWebJobsStorage": "",
    "FUNCTIONS_WORKER_RUNTIME": "python"
  }
}
EOF

      - name: Clean up development files
        run: |
          cd backend
          # Remove development files
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name ".coverage" -delete
          find . -name ".env*" -delete
          find . -name "venv" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Clean up Python packages
          find .python_packages -name "*.pyc" -delete 2>/dev/null || true
          find .python_packages -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Create deployment package
        id: set-output
        run: |
          cd backend
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          ARTIFACT_NAME="backend-deploy-${TIMESTAMP}-${COMMIT_SHA}.zip"
          
          zip -r "../${ARTIFACT_NAME}" . \
            -x "venv/*" "__pycache__/*" "*.pyc" ".env*" ".git/*" ".pytest_cache/*" ".coverage" "tests/*"
          
          echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          
          # Verify package contents
          echo "üì¶ Package contents:"
          unzip -l "../${ARTIFACT_NAME}" | head -15
          echo "üìä Package size: $(du -h "../${ARTIFACT_NAME}" | cut -f1)"

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-output.outputs.artifact-name }}
          path: ${{ steps.set-output.outputs.artifact-name }}
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: 
      name: production
      url: https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}

      - name: Verify deployment package
        run: |
          echo "üì¶ Verifying deployment package..."
          ls -la
          echo "üìã Package contents:"
          unzip -l *.zip | head -10
          echo "üìä Package size: $(du -h *.zip | cut -f1)"

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        id: deploy
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          slot-name: 'Production'
          package: './*.zip'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_675C49512C594314BAAACAA9F6D5FD95 }}
          scm-do-build-during-deployment: false
          enable-oryx-build: false

      - name: Wait for function to start
        run: |
          echo "‚è≥ Waiting for function to start..."
          sleep 30

      - name: Health check
        run: |
          echo "üè• Performing health check..."
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES"
            if curl -f "https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/health" \
                     --max-time 30 \
                     --retry 3 \
                     --retry-delay 2 \
                     --silent --show-error; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ö†Ô∏è Health check failed (attempt $i)"
              if [ $i -lt $MAX_RETRIES ]; then
                echo "‚è≥ Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              else
                echo "‚ùå Health check failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

      - name: Deployment summary
        if: always()
        run: |
          echo "üéâ Deployment Summary"
          echo "===================="
          echo "Function App: ${{ env.FUNCTION_APP_NAME }}"
          echo "Environment: production"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Deployment URL: https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net"
          echo "Health Check: https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/health"